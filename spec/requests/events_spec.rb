# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/events', type: :request do
  let(:admin) { create :user, :admin }
  let(:client) { create :client }
  let(:main_entrance) { create :room }
  let(:attached_tags) { %w[tag1 tag2 tag3] }
  let(:valid_attributes) do
    {
      name: Faker::FunnyName.name,
      start_time: 20.hours.from_now.to_s,
      end_time: 25.hours.from_now.to_s,
      client_id: client.id,
      main_entrance_id: main_entrance.id,
      tag_list: attached_tags.join(','),
      landing_prompt: Faker::Lorem.words.join(' '),
      landing_logo: Faker::Lorem.word,
      landing_background_color: Faker::Color.hex_color,
      landing_foreground_color: Faker::Color.hex_color
    }
  end

  let(:invalid_attributes) {
    skip('Add a hash of attributes invalid for your model')
  }

  before { sign_in admin }

  describe 'GET /index' do
    it_behaves_like 'authorization protected action' do
      subject(:send_request) { get events_url }
    end

    it 'renders a successful response' do
      Event.create! valid_attributes
      get events_url
      expect(response).to be_successful
    end

    it 'returns success response after publish' do
      event = Event.create! valid_attributes
      post publish_event_url(id: event.id), params: { format: :js }
      expect(response).to be_successful
    end

    it 'returns success response after unpublish' do
      event = Event.create! valid_attributes
      # post publish_event_url(id: event.id), params: { format: :js }
      post unpublish_event_url(id: event.id), params: { format: :js }
      expect(response).to be_successful
    end

    it 'publishes the event in redis' do
      event = Event.create! valid_attributes
      post publish_event_url(id: event.id), params: { format: :js }

      expect(Redis.current.hget("event.#{event.key}", 'main_entrance')).to eq event.main_entrance.path
      expect(Redis.current.hget("event.#{event.key}", 'start_time')).to eq (event.start_time.to_i * 1000).to_s
      expect(Redis.current.hget("event.#{event.key}", 'end_time')).to eq (event.end_time.to_i * 1000).to_s
      expect(Redis.current.hget("event.#{event.key}", 'landing_prompt')).to eq event.landing_prompt
      expect(Redis.current.hget("event.#{event.key}", 'landing_logo')).to eq event.landing_logo
      expect(Redis.current.hget("event.#{event.key}", 'landing_background_color')).to eq event.landing_background_color
      expect(Redis.current.hget("event.#{event.key}", 'landing_foreground_color')).to eq event.landing_foreground_color
    end

    it 'unpublishes the event from redis' do
      event = Event.create! valid_attributes
      post publish_event_url(id: event.id), params: { format: :js }
      post unpublish_event_url(id: event.id), params: { format: :js }
      expect(Redis.current.exists("event.#{event.key}")).to eq 0
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      event = Event.create! valid_attributes
      get event_url(event)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it_behaves_like 'authorization protected action' do
      subject(:send_request) { get new_event_url }
    end

    it 'renders a successful response' do
      get new_event_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    let(:event) { Event.create! valid_attributes }

    it_behaves_like 'authorization protected action' do
      subject(:send_request) { get edit_event_url(event) }
    end

    it 'render a successful response' do
      get edit_event_url(event)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it_behaves_like 'authorization protected action' do
        subject(:send_request) { post events_url, params: { event: valid_attributes } }
      end

      it 'creates a new Event' do
        expect {
          post events_url, params: { event: valid_attributes }
        }.to change(Event, :count).by(1)
      end

      it 'redirects to the created event' do
        post events_url, params: { event: valid_attributes }
        expect(response).to redirect_to(events_url)
      end

      it 'attaches tags to event' do
        post events_url, params: { event: valid_attributes }
        expect(Event.last.tags.pluck(:name)).to contain_exactly(*attached_tags)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Event' do
        expect {
          post events_url, params: { event: invalid_attributes }
        }.to change(Event, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post events_url, params: { event: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) {
        {
          name: Faker::FunnyName.name,
          start_time: 10.hours.from_now.to_s,
          end_time: 13.hours.from_now.to_s
        }
      }

      it_behaves_like 'authorization protected action' do
        subject(:send_request) do
          event = Event.create! valid_attributes
          patch event_url(event), params: { event: new_attributes }
        end
      end

      it 'updates the requested event' do
        event = Event.create! valid_attributes
        patch event_url(event), params: { event: new_attributes }
        event.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the event' do
        event = Event.create! valid_attributes
        patch event_url(event), params: { event: new_attributes }
        event.reload
        expect(response).to redirect_to(edit_event_url(event))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        event = Event.create! valid_attributes
        patch event_url(event), params: { event: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    let!(:event) { create :event }

    it_behaves_like 'authorization protected action' do
      subject(:send_request) { delete event_url(event) }
    end

    it 'destroys the requested event' do
      expect { delete event_url(event) }.to change(Event, :count).by(-1)
    end

    it 'redirects to the events list' do
      delete event_url(event)
      expect(response).to redirect_to(events_url)
    end
  end

  describe 'POST /upload_attendees' do
    subject(:send_request) do
      post upload_attendees_event_path(event), params: { upload: { file: file } }
    end

    let(:event) { create :event }
    let(:file) { fixture_file_upload('correct_attendees_list.csv', 'text/csv') }

    it_behaves_like 'authorization protected action'

    context 'correct input' do
      it 'creates attendees records' do
        expect { send_request }.to change(Attendee, 'count').by(5)
      end

      it 'binds attendees to event' do
        send_request
        expect(Attendee.last(5).map(&:event_id)).to all(eq(event.id))
      end
    end

    context 'wrong input file' do
      let(:file) { fixture_file_upload('wrong_attendees_list.csv', 'text/csv') }

      it 'doesnt create attendees records' do
        expect { send_request }.not_to change(Attendee, 'count')
      end

      it 'responds with flash error' do
        send_request
        expect(flash[:error]).to include('Processing csv file error')
      end
    end
  end
end
