# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/contents', type: :request do
  let(:admin) { create :user, :admin }

  let(:valid_attributes) do
    {
      name: 'Very useful manual',
      tag_list: ['tag one', 'tag two', 'tag three'],
      file: fixture_file_upload('wrong_attendees_list.csv', 'text/csv')
    }
  end

  let(:valid_attributes_2) do
    {
      name: 'Not useful manual',
      tag_list: ['tag one', 'tag two', 'tag three'],
      file: fixture_file_upload('wrong_attendees_list.csv', 'text/csv')
    }
  end

  let(:invalid_attributes) {
    skip('Add a hash of attributes invalid for your model')
  }

  before { sign_in admin }

  describe 'GET /index' do
    it_behaves_like 'authorization protected action' do
      subject(:send_request) { get contents_url }
    end

    it 'renders a successful response' do
      Content.create! valid_attributes
      get contents_url
      expect(response).to be_successful
    end

    it 'renders a successful json response' do
      Content.create! valid_attributes
      headers = { 'accept' => 'application/json' }
      get contents_url, headers: headers
      expect(response).to be_successful
    end

    it 'returns json with two records' do
      Content.create! valid_attributes
      Content.create! valid_attributes_2
      headers = { 'accept' => 'application/json' }
      get contents_url, params: { 'q[name_cont]': 'manual' }, headers: headers
      json = JSON.parse(response.body)
      expect(json.count).to eq 2
    end

    it 'returns json with one records' do
      Content.create! valid_attributes
      Content.create! valid_attributes_2
      headers = { 'accept' => 'application/json' }
      get contents_url, params: { 'q[name_cont]': 'not' }, headers: headers
      json = JSON.parse(response.body)
      expect(json.count).to eq 1
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      content = Content.create! valid_attributes
      get content_url(content)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it_behaves_like 'authorization protected action' do
      subject(:send_request) { get new_content_url }
    end

    it 'renders a successful response' do
      get new_content_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    let!(:content) { Content.create! valid_attributes }

    it_behaves_like 'authorization protected action' do
      subject(:send_request) { get edit_content_url(content) }
    end

    it 'render a successful response' do
      get edit_content_url(content)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    it_behaves_like 'authorization protected action' do
      subject(:send_request) { post contents_url, params: { content: valid_attributes } }
    end

    context 'with valid parameters' do
      it 'creates a new Content' do
        expect {
          post contents_url, params: { content: valid_attributes }
        }.to change(Content, :count).by(1)
      end

      it 'redirects to the created content' do
        post contents_url, params: { content: valid_attributes }
        expect(response).to redirect_to(contents_url)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Content' do
        expect {
          post contents_url, params: { content: invalid_attributes }
        }.to change(Content, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post contents_url, params: { content: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    let!(:content) { Content.create! valid_attributes }
    let(:new_attributes) { { name: 'Trash', tag_list: ['Replace ASAP'] } }

    it_behaves_like 'authorization protected action' do
      subject(:send_request) do
        patch content_url(content), params: { content: new_attributes }
      end
    end

    context 'with valid parameters' do
      it 'updates the requested content' do
        patch content_url(content), params: { content: new_attributes }
        content.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the content' do
        patch content_url(content), params: { content: new_attributes }
        content.reload
        expect(response).to redirect_to(contents_url)
      end

      it 'redirects to the content' do
        patch content_url(content), params: { content: new_attributes }
        content.reload
        expect(response).to redirect_to(contents_url)
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        content = Content.create! valid_attributes
        patch content_url(content), params: { content: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    subject(:send_request) { delete content_url(content) }

    let!(:content) { Content.create! valid_attributes }

    it_behaves_like 'authorization protected action'

    it 'destroys the requested content' do
      expect { send_request }.to change(Content, :count).by(-1)
    end

    it 'redirects to the contents list' do
      send_request
      expect(response).to redirect_to(contents_url)
    end

    it 'destroys the attachment' do
      expect { send_request }.to \
        change(ActiveStorage::Attachment, :count).by(-1)
    end
  end
end
