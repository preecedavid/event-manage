# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/contents', type: :request do
  let(:user) { create :user }

  let(:valid_attributes) {
    skip('Add a hash of attributes valid for your model')
  }

  let(:invalid_attributes) {
    skip('Add a hash of attributes invalid for your model')
  }

  before { sign_in user }

  describe 'GET /index' do
    it 'renders a successful response' do
      Content.create! valid_attributes
      get contents_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      content = Content.create! valid_attributes
      get content_url(content)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_content_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      content = Content.create! valid_attributes
      get edit_content_url(content)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Content' do
        expect {
          post contents_url, params: { content: valid_attributes }
        }.to change(Content, :count).by(1)
      end

      it 'redirects to the created content' do
        post contents_url, params: { content: valid_attributes }
        expect(response).to redirect_to(content_url(Content.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Content' do
        expect {
          post contents_url, params: { content: invalid_attributes }
        }.to change(Content, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post contents_url, params: { content: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) {
        skip('Add a hash of attributes valid for your model')
      }

      it 'updates the requested content' do
        content = Content.create! valid_attributes
        patch content_url(content), params: { content: new_attributes }
        content.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the content' do
        content = Content.create! valid_attributes
        patch content_url(content), params: { content: new_attributes }
        content.reload
        expect(response).to redirect_to(content_url(content))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        content = Content.create! valid_attributes
        patch content_url(content), params: { content: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested content' do
      content = Content.create! valid_attributes
      expect {
        delete content_url(content)
      }.to change(Content, :count).by(-1)
    end

    it 'redirects to the contents list' do
      content = Content.create! valid_attributes
      delete content_url(content)
      expect(response).to redirect_to(contents_url)
    end
  end
end
